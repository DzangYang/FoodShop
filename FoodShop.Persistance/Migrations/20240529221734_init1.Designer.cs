// <auto-generated />
using System;
using FoodShop.Persistance.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodShop.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240529221734_init1")]
    partial class init1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Cash")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.BonusCard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BonusCards");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.CategoryProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CategoryProducts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("97fba9e2-0ce4-4175-a135-f687287582b1"),
                            Name = "Овощи"
                        },
                        new
                        {
                            Id = new Guid("7ecc616c-f09b-44d4-83ab-c4d31e237eb5"),
                            Name = "Фрукты"
                        },
                        new
                        {
                            Id = new Guid("6368c3a6-371b-4e71-9368-259962da5dc0"),
                            Name = "Хлеб и выпечка"
                        },
                        new
                        {
                            Id = new Guid("f1de3e56-cee8-43f9-a90d-61e21feb262b"),
                            Name = "Молочные продукты"
                        },
                        new
                        {
                            Id = new Guid("47a71f1e-e386-404c-a38a-a0172124ebd8"),
                            Name = "Сладости"
                        });
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Payment")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CategoryProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efe52f75-7640-4aea-b6fa-f07c9f6b01bc"),
                            CategoryProductId = new Guid("97fba9e2-0ce4-4175-a135-f687287582b1"),
                            ImageURL = "/ImagesForCursach/Vegetabbles/Cucumbers.png",
                            Name = "Огурцы",
                            Price = 70m
                        },
                        new
                        {
                            Id = new Guid("fc1979ad-fd7a-4fda-abc0-4f8ac467f7f5"),
                            CategoryProductId = new Guid("97fba9e2-0ce4-4175-a135-f687287582b1"),
                            ImageURL = "/ImagesForCursach/Vegetabbles/Tomatoes.png",
                            Name = "Помидоры",
                            Price = 65m
                        },
                        new
                        {
                            Id = new Guid("947b61e4-8d2f-41e9-930b-978826396ee0"),
                            CategoryProductId = new Guid("97fba9e2-0ce4-4175-a135-f687287582b1"),
                            ImageURL = "/ImagesForCursach/Vegetabbles/Carrots.png",
                            Name = "Морковь",
                            Price = 50m
                        },
                        new
                        {
                            Id = new Guid("450ad9c2-6677-4fd4-9fed-9297ef780d5a"),
                            CategoryProductId = new Guid("97fba9e2-0ce4-4175-a135-f687287582b1"),
                            ImageURL = "/ImagesForCursach/Vegetabbles/Potatoes.png",
                            Name = "Картофель",
                            Price = 40m
                        },
                        new
                        {
                            Id = new Guid("03636c13-8afc-4f37-8886-62604495d1cd"),
                            CategoryProductId = new Guid("97fba9e2-0ce4-4175-a135-f687287582b1"),
                            ImageURL = "/ImagesForCursach/Vegetabbles/Onions.png",
                            Name = "Лук",
                            Price = 30m
                        },
                        new
                        {
                            Id = new Guid("fdd5502a-e06d-4408-88cf-100fa5b86ee1"),
                            CategoryProductId = new Guid("7ecc616c-f09b-44d4-83ab-c4d31e237eb5"),
                            ImageURL = "/ImagesForCursach/Fruits/Apples.png",
                            Name = "Яблоки",
                            Price = 80m
                        },
                        new
                        {
                            Id = new Guid("dec205b9-e8c6-4aca-9027-c107dd3829eb"),
                            CategoryProductId = new Guid("7ecc616c-f09b-44d4-83ab-c4d31e237eb5"),
                            ImageURL = "/ImagesForCursach/Fruits/Banan.png",
                            Name = "Бананы",
                            Price = 70m
                        },
                        new
                        {
                            Id = new Guid("730ec087-4bc8-45d7-b90f-ab15f0a9359a"),
                            CategoryProductId = new Guid("7ecc616c-f09b-44d4-83ab-c4d31e237eb5"),
                            ImageURL = "/ImagesForCursach/Fruits/Oranges.png",
                            Name = "Апельсины",
                            Price = 60m
                        },
                        new
                        {
                            Id = new Guid("41260f90-ef91-41a2-9962-dd078f4fbb59"),
                            CategoryProductId = new Guid("7ecc616c-f09b-44d4-83ab-c4d31e237eb5"),
                            ImageURL = "/ImagesForCursach/Fruits/Grapefruit.png",
                            Name = "Грейпфрут",
                            Price = 55m
                        },
                        new
                        {
                            Id = new Guid("0f317567-48f5-4941-b15e-625a7bdee4a9"),
                            CategoryProductId = new Guid("7ecc616c-f09b-44d4-83ab-c4d31e237eb5"),
                            ImageURL = "/ImagesForCursach/Fruits/Pears.png",
                            Name = "Груши",
                            Price = 45m
                        },
                        new
                        {
                            Id = new Guid("fc4e9267-7fd0-41a4-aed4-3b7a9974f1b8"),
                            CategoryProductId = new Guid("6368c3a6-371b-4e71-9368-259962da5dc0"),
                            ImageURL = "/ImagesForCursach/BreadAndPastries/Bread.png",
                            Name = "Хлеб белый",
                            Price = 35m
                        },
                        new
                        {
                            Id = new Guid("21fbae37-17ca-441e-b786-6701a7190483"),
                            CategoryProductId = new Guid("6368c3a6-371b-4e71-9368-259962da5dc0"),
                            ImageURL = "/ImagesForCursach/BreadAndPastries/Baton.png",
                            Name = "Батон",
                            Price = 25m
                        },
                        new
                        {
                            Id = new Guid("8998c2ef-861f-46d8-a688-70931c472308"),
                            CategoryProductId = new Guid("6368c3a6-371b-4e71-9368-259962da5dc0"),
                            ImageURL = "/ImagesForCursach/BreadAndPastries/BreadAndRollRaisin.png",
                            Name = "Булочка с изюмом",
                            Price = 40m
                        },
                        new
                        {
                            Id = new Guid("a838585b-0cbe-42d2-8df6-17c6d0a8a651"),
                            CategoryProductId = new Guid("6368c3a6-371b-4e71-9368-259962da5dc0"),
                            ImageURL = "/ImagesForCursach/BreadAndPastries/AppleCake.png",
                            Name = "Пирог с яблоками",
                            Price = 120m
                        },
                        new
                        {
                            Id = new Guid("ca019809-ca67-4424-9819-6295e8bf95a9"),
                            CategoryProductId = new Guid("6368c3a6-371b-4e71-9368-259962da5dc0"),
                            ImageURL = "/ImagesForCursach/BreadAndPastries/CheseCake.png",
                            Name = "Ватрушка",
                            Price = 50m
                        },
                        new
                        {
                            Id = new Guid("cc6fdda7-72b7-4d9a-ab68-9054bccb4336"),
                            CategoryProductId = new Guid("f1de3e56-cee8-43f9-a90d-61e21feb262b"),
                            ImageURL = "/ImagesForCursach/MilkProducts/Milk.png",
                            Name = "Молоко",
                            Price = 80m
                        },
                        new
                        {
                            Id = new Guid("d10bde03-c746-43fa-965a-2e46fb07f8dd"),
                            CategoryProductId = new Guid("f1de3e56-cee8-43f9-a90d-61e21feb262b"),
                            ImageURL = "/ImagesForCursach/MilkProducts/SourCream.png",
                            Name = "Сметана",
                            Price = 60m
                        },
                        new
                        {
                            Id = new Guid("49a8f214-8ab2-42bb-bfc5-5de5037c4dc6"),
                            CategoryProductId = new Guid("f1de3e56-cee8-43f9-a90d-61e21feb262b"),
                            ImageURL = "/ImagesForCursach/MilkProducts/ButterMilk.png",
                            Name = "Кефир",
                            Price = 50m
                        },
                        new
                        {
                            Id = new Guid("2c4290e9-93a9-4514-83d9-60923e6e04d4"),
                            CategoryProductId = new Guid("f1de3e56-cee8-43f9-a90d-61e21feb262b"),
                            ImageURL = "/ImagesForCursach/MilkProducts/Yoghurt.png",
                            Name = "Йогурт",
                            Price = 40m
                        },
                        new
                        {
                            Id = new Guid("477af63e-c818-4ead-92e2-57d9e6a3c745"),
                            CategoryProductId = new Guid("47a71f1e-e386-404c-a38a-a0172124ebd8"),
                            ImageURL = "/ImagesForCursach/Sweets/Snickers.png",
                            Name = "Шоколадный батончик",
                            Price = 50m
                        },
                        new
                        {
                            Id = new Guid("478dbc57-d6d0-4926-a9cd-3860a190531a"),
                            CategoryProductId = new Guid("47a71f1e-e386-404c-a38a-a0172124ebd8"),
                            ImageURL = "/ImagesForCursach/Sweets/Marmalade.png",
                            Name = "Мармелад",
                            Price = 40m
                        },
                        new
                        {
                            Id = new Guid("54a10746-4b97-4075-8104-f7d246359b72"),
                            CategoryProductId = new Guid("47a71f1e-e386-404c-a38a-a0172124ebd8"),
                            ImageURL = "/ImagesForCursach/Sweets/Biscuits.png",
                            Name = "Печенье",
                            Price = 30m
                        },
                        new
                        {
                            Id = new Guid("3c90457d-29bc-4a5f-b88b-7f90a9ee3f78"),
                            CategoryProductId = new Guid("47a71f1e-e386-404c-a38a-a0172124ebd8"),
                            ImageURL = "/ImagesForCursach/Sweets/Candy.png",
                            Name = "Конфеты",
                            Price = 25m
                        },
                        new
                        {
                            Id = new Guid("4009b958-37ad-4a30-9eed-3269465fae48"),
                            CategoryProductId = new Guid("47a71f1e-e386-404c-a38a-a0172124ebd8"),
                            ImageURL = "/ImagesForCursach/Sweets/IceCream.png",
                            Name = "Мороженое",
                            Price = 100m
                        });
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Qantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.BonusCard", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Entities.ApplicationUser", null)
                        .WithOne("BonusCard")
                        .HasForeignKey("FoodShop.Domain.Domain.Entities.BonusCard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Order", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Entities.ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Product", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Entities.CategoryProduct", "CategoryProduct")
                        .WithMany("Products")
                        .HasForeignKey("CategoryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryProduct");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Sale", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Entities.Order", "Order")
                        .WithMany("Sales")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodShop.Domain.Domain.Entities.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodShop.Domain.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("BonusCard");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.CategoryProduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Order", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Product", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
