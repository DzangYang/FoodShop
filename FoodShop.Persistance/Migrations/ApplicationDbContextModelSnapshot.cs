// <auto-generated />
using System;
using FoodShop.Persistance.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodShop.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Cash")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.BonusCard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BonusCards");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.CategoryProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CategoryProducts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("79629e33-966e-4002-89be-fb98312fd97b"),
                            Name = "Овощи"
                        },
                        new
                        {
                            Id = new Guid("1444a460-9f4f-495a-8075-2c2c38f0884c"),
                            Name = "Фрукты"
                        },
                        new
                        {
                            Id = new Guid("8f98165e-5cfa-46f3-b864-181b4b26517b"),
                            Name = "Хлеб и выпечка"
                        },
                        new
                        {
                            Id = new Guid("4c8d62ea-e2f7-4526-a7b8-9211f64c8426"),
                            Name = "Молочные продукты"
                        },
                        new
                        {
                            Id = new Guid("c05fb759-953f-4276-84e4-30db87d639e7"),
                            Name = "Сладости"
                        });
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Payment")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CategoryProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a068db7-db41-4cc2-838b-8c67ba2c036e"),
                            CategoryProductId = new Guid("79629e33-966e-4002-89be-fb98312fd97b"),
                            ImageURL = "/ImagesForCursach/Vegetabbles/Cucumbers.png",
                            Name = "Огурцы",
                            Price = 70m
                        },
                        new
                        {
                            Id = new Guid("08791d3f-001e-4568-964a-c40d08dce62f"),
                            CategoryProductId = new Guid("79629e33-966e-4002-89be-fb98312fd97b"),
                            ImageURL = "/ImagesForCursach/Vegetabbles/Tomatoes.png",
                            Name = "Помидоры",
                            Price = 65m
                        },
                        new
                        {
                            Id = new Guid("21bcfc56-58d6-420b-b7e1-d503ce4145f2"),
                            CategoryProductId = new Guid("79629e33-966e-4002-89be-fb98312fd97b"),
                            ImageURL = "/ImagesForCursach/Vegetabbles/Carrots.png",
                            Name = "Морковь",
                            Price = 50m
                        },
                        new
                        {
                            Id = new Guid("8b318592-5235-4a0a-a9c4-976c8d01d5d6"),
                            CategoryProductId = new Guid("79629e33-966e-4002-89be-fb98312fd97b"),
                            ImageURL = "/ImagesForCursach/Vegetabbles/Potatoes.png",
                            Name = "Картофель",
                            Price = 40m
                        },
                        new
                        {
                            Id = new Guid("a02c4b27-0c16-44d2-b6d6-2ca2ac234a42"),
                            CategoryProductId = new Guid("79629e33-966e-4002-89be-fb98312fd97b"),
                            ImageURL = "/ImagesForCursach/Vegetabbles/Onions.png",
                            Name = "Лук",
                            Price = 30m
                        },
                        new
                        {
                            Id = new Guid("98737da3-c3d4-426d-b964-aeab20fe0164"),
                            CategoryProductId = new Guid("1444a460-9f4f-495a-8075-2c2c38f0884c"),
                            ImageURL = "/ImagesForCursach/Fruits/Apples.png",
                            Name = "Яблоки",
                            Price = 80m
                        },
                        new
                        {
                            Id = new Guid("29864449-0da2-4d4c-b050-267be9338c37"),
                            CategoryProductId = new Guid("1444a460-9f4f-495a-8075-2c2c38f0884c"),
                            ImageURL = "/ImagesForCursach/Fruits/Banan.png",
                            Name = "Бананы",
                            Price = 70m
                        },
                        new
                        {
                            Id = new Guid("1ab355b4-f87a-4d3c-83c1-b2a5bd2a497d"),
                            CategoryProductId = new Guid("1444a460-9f4f-495a-8075-2c2c38f0884c"),
                            ImageURL = "/ImagesForCursach/Fruits/Oranges.png",
                            Name = "Апельсины",
                            Price = 60m
                        },
                        new
                        {
                            Id = new Guid("9fb0a17c-dcc7-4768-817d-4c0da03863d2"),
                            CategoryProductId = new Guid("1444a460-9f4f-495a-8075-2c2c38f0884c"),
                            ImageURL = "/ImagesForCursach/Fruits/Grapefruit.png",
                            Name = "Грейпфрут",
                            Price = 55m
                        },
                        new
                        {
                            Id = new Guid("155ca4fd-da69-4569-bf05-1c6567147954"),
                            CategoryProductId = new Guid("1444a460-9f4f-495a-8075-2c2c38f0884c"),
                            ImageURL = "/ImagesForCursach/Fruits/Pears.png",
                            Name = "Груши",
                            Price = 45m
                        },
                        new
                        {
                            Id = new Guid("9fdff856-a2b8-4ebd-b927-144594a4813b"),
                            CategoryProductId = new Guid("8f98165e-5cfa-46f3-b864-181b4b26517b"),
                            ImageURL = "/ImagesForCursach/BreadAndPastries/Bread.png",
                            Name = "Хлеб белый",
                            Price = 35m
                        },
                        new
                        {
                            Id = new Guid("64b059cc-6c85-4aaf-b698-c55e932a1025"),
                            CategoryProductId = new Guid("8f98165e-5cfa-46f3-b864-181b4b26517b"),
                            ImageURL = "/ImagesForCursach/BreadAndPastries/Baton.png",
                            Name = "Батон",
                            Price = 25m
                        },
                        new
                        {
                            Id = new Guid("9ffb4093-c66a-4963-85af-64e4cddfb7a8"),
                            CategoryProductId = new Guid("8f98165e-5cfa-46f3-b864-181b4b26517b"),
                            ImageURL = "/ImagesForCursach/BreadAndPastries/BreadAndRollRaisin.png",
                            Name = "Булочка с изюмом",
                            Price = 40m
                        },
                        new
                        {
                            Id = new Guid("78ecc6a8-ce69-4722-b523-5ea5d8e027ec"),
                            CategoryProductId = new Guid("8f98165e-5cfa-46f3-b864-181b4b26517b"),
                            ImageURL = "/ImagesForCursach/BreadAndPastries/AppleCake.png",
                            Name = "Пирог с яблоками",
                            Price = 120m
                        },
                        new
                        {
                            Id = new Guid("1755aa7b-bd49-4142-96d1-25cfa579f78f"),
                            CategoryProductId = new Guid("8f98165e-5cfa-46f3-b864-181b4b26517b"),
                            ImageURL = "/ImagesForCursach/BreadAndPastries/CheseCake.png",
                            Name = "Ватрушка",
                            Price = 50m
                        },
                        new
                        {
                            Id = new Guid("4df56152-aa04-4bc6-be2c-2d34abfe5e34"),
                            CategoryProductId = new Guid("4c8d62ea-e2f7-4526-a7b8-9211f64c8426"),
                            ImageURL = "/ImagesForCursach/MilkProducts/Milk.png",
                            Name = "Молоко",
                            Price = 80m
                        },
                        new
                        {
                            Id = new Guid("d361cf7b-3050-485f-874a-b22c4c7c52be"),
                            CategoryProductId = new Guid("4c8d62ea-e2f7-4526-a7b8-9211f64c8426"),
                            ImageURL = "/ImagesForCursach/MilkProducts/SourCream.png",
                            Name = "Сметана",
                            Price = 60m
                        },
                        new
                        {
                            Id = new Guid("f454eecd-7b46-498f-a4b4-fa299a267a79"),
                            CategoryProductId = new Guid("4c8d62ea-e2f7-4526-a7b8-9211f64c8426"),
                            ImageURL = "/ImagesForCursach/MilkProducts/ButterMilk.png",
                            Name = "Кефир",
                            Price = 50m
                        },
                        new
                        {
                            Id = new Guid("ca8c600c-53ff-477c-8b3b-07a8167dea4d"),
                            CategoryProductId = new Guid("4c8d62ea-e2f7-4526-a7b8-9211f64c8426"),
                            ImageURL = "/ImagesForCursach/MilkProducts/Yoghurt.png",
                            Name = "Йогурт",
                            Price = 40m
                        },
                        new
                        {
                            Id = new Guid("382d33a5-9ea1-455c-a330-22b30628adf0"),
                            CategoryProductId = new Guid("c05fb759-953f-4276-84e4-30db87d639e7"),
                            ImageURL = "/ImagesForCursach/Sweets/Snickers.png",
                            Name = "Шоколадный батончик",
                            Price = 50m
                        },
                        new
                        {
                            Id = new Guid("fde04e4f-4642-43dd-8973-a2576d4de748"),
                            CategoryProductId = new Guid("c05fb759-953f-4276-84e4-30db87d639e7"),
                            ImageURL = "/ImagesForCursach/Sweets/Marmalade.png",
                            Name = "Мармелад",
                            Price = 40m
                        },
                        new
                        {
                            Id = new Guid("648ea324-56b1-4889-8a4a-c5ee63e35cad"),
                            CategoryProductId = new Guid("c05fb759-953f-4276-84e4-30db87d639e7"),
                            ImageURL = "/ImagesForCursach/Sweets/Biscuits.png",
                            Name = "Печенье",
                            Price = 30m
                        },
                        new
                        {
                            Id = new Guid("342da0b8-e2ff-449d-94d3-1b63ba06d302"),
                            CategoryProductId = new Guid("c05fb759-953f-4276-84e4-30db87d639e7"),
                            ImageURL = "/ImagesForCursach/Sweets/Candy.png",
                            Name = "Конфеты",
                            Price = 25m
                        },
                        new
                        {
                            Id = new Guid("325f9548-6ba5-4991-8968-150975b6fda2"),
                            CategoryProductId = new Guid("c05fb759-953f-4276-84e4-30db87d639e7"),
                            ImageURL = "/ImagesForCursach/Sweets/IceCream.png",
                            Name = "Мороженое",
                            Price = 100m
                        });
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Qantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.BonusCard", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Entities.ApplicationUser", null)
                        .WithOne("BonusCard")
                        .HasForeignKey("FoodShop.Domain.Domain.Entities.BonusCard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Order", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Entities.ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Product", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Entities.CategoryProduct", "CategoryProduct")
                        .WithMany("Products")
                        .HasForeignKey("CategoryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryProduct");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Sale", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Entities.Order", "Order")
                        .WithMany("Sales")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodShop.Domain.Domain.Entities.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodShop.Domain.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FoodShop.Domain.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("BonusCard");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.CategoryProduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Order", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("FoodShop.Domain.Domain.Entities.Product", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
