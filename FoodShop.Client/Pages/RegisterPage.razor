@page "/register"
@using NetcodeHub.Packages.Components.Validations.OnInput
@using FoodShop.Client.States
@using FoodShop.Application.Interfaces.Identity
@using FoodShop.Application.DTO
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Json

@inject NavigationManager NavManager
@inject HttpClient Http
@inject IRegistrationService RegisterService


<div class="row">

    <div class="col-lg-5">
        <div class="alert alert-info">@Message</div>
        <EditForm Model="RegisterModel" OnValidSubmit="RegisterAsync">
            <DataAnnotationsValidator />
            <FloatingText @bind-Value="RegisterModel.Login" Label="Login" Type="login" class="form-control mb-3" />
            <FloatingText @bind-Value="RegisterModel.Password" Label="Password" Type="password" class="form-control mb-3 " />
            <button class="btn btn-primary mb-3" type="submit">Register</button>
            <Blazorise.ValidationSummary class="text-danger" />
        </EditForm>

    </div>
</div>



@code {
    public string? Message = string.Empty;

    UserRegistrationModelDto RegisterModel = new();
   
    //Метод регистрации пользователя
    async Task RegisterAsync()
    {
        try
        {

            // Отправка запроса на сервер с правильным форматом данных
            var response = await Http.PostAsJsonAsync("https://localhost:7228/api/User/register", RegisterModel);


            if (response.IsSuccessStatusCode)
            {
                NavManager.NavigateTo("login", forceLoad: true);
                Message = "Регистрация прошла успешно";
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Message = $"Ошибка при создании бонусной карты: {response.ReasonPhrase}, {errorContent}";
            }
        }
        catch (HttpRequestException ex)
        {
            Message = $"Ошибка при отправке запроса: {ex.Message}";
        }
    }
    public class UserRegistrationModelDto
    {
        [Required]
        public string Login { get; set; }

        [Required, Compare(nameof(Password))]
        public string Password { get; set; }

    }

}

