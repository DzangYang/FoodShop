



@page "/wallet"
@using FoodShop.Client.States
@using NetcodeHub.Packages.Components.Validations.OnInput
@using Microsoft.AspNetCore.Components.Forms
@using FoodShop.Application.Interfaces.Identity
@using FoodShop.Application.DTO
@using Blazored.LocalStorage;
@using FoodShop.Application.Services.BonusCardService

@inject ILocalStorageService localStorage
@inject HttpClient Http

<h3>Данные дебетовой карты</h3>

<div class="row">
    <div class="col-lg-5">
        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert alert-info">@Message</div>
        }

        <EditForm Model="@wallet" OnValidSubmit="@AddWalletCard">
            <DataAnnotationsValidator />
            <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

            <div class="mb-3">
                <label for="holderName" class="form-label">Имя владельца</label>
                <InputText id="holderName" class="form-control" @bind-Value="wallet.HolderName" />
            </div>

            <div class="mb-3">
                <label for="number" class="form-label">Номер карты</label>
                <InputText id="number" class="form-control" @bind-Value="wallet.Number" />
            </div>

            <div class="mb-3">
                <label for="cvv" class="form-label">CVV</label>
                <InputText id="cvv" class="form-control" @bind-Value="wallet.CVV" />
            </div>

            <div class="mb-3">
                <label for="expiryDate" class="form-label">Срок действия</label>
                <InputDate id="expiryDate" class="form-control" @bind-Value="wallet.ExpiryDate" />
            </div>

            <div class="mb-3">
                <label for="amount" class="form-label">Счет</label>
                <InputNumber id="amount" class="form-control" @bind-Value="wallet.Amount" />
            </div>

            <button type="submit" class="btn btn-primary">Привязать существующую дебетовую карту</button>
        </EditForm>
    </div>
</div>


@code {

    string? Message = string.Empty;
    Wallet wallet = new Wallet();


    //Метод привязки дебетовой карты
    public async void AddWalletCard()
    {
        string token = await localStorage.GetItemAsStringAsync("auth");
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7228/api/Wallet", wallet);
            response.EnsureSuccessStatusCode();

            if (response.IsSuccessStatusCode)
            {
                Message = "Дебетовая  карта успешно привязана!";
            }
            else
            {
                Message = $"Ошибка при привязки дебетовой  карты: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            Message = $"Произошла ошибка: {ex.Message}";
        }

    }


    public class Wallet
    {
       
        /// <summary>
        /// Имя владельца
        /// </summary>
        public string HolderName { get; set; }

        /// <summary>
        /// Номер
        /// </summary>
        public string Number { get; set; }

        /// <summary>
        /// Сvv владельца
        /// </summary>
        public string CVV { get; set; }

        /// <summary>
        /// Срок действия
        /// </summary>
        public DateTime ExpiryDate { get; set; }

        /// <summary>
        /// Счет
        /// </summary>
        public decimal Amount { get; set; }
    }

}


