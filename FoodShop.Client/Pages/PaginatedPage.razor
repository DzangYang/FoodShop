@page "/products"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Blazored.LocalStorage
@using FoodShop.Domain.Domain.Entities
@inject ILocalStorageService localStorage
@inject HttpClient Http
@inject NavigationManager NavManager

<div>
    @if (products == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="container">
            <div class="row">
                @foreach (var product in products)
                {
                    <div class=" col-md-4 mb-4">
                        
                        <div class="card_container" @onclick="() => NavigateToProduct(product.Id)">
                            <div class="card">
                                <img class="img-thumbnail" src="@product.ImageURL">
                                <div class="card-body">
                                    <h5 class="card-title mb-3">@product.Name</h5>
                                    <p class="card-text">
                                        <b>@product.Price.ToString("C")
                                            @if (product.CategoryName == "Овощи" || product.CategoryName == "Фрукты" || product.CategoryName == "Сладости")
                                            {
                                                <span>(за 1кг)</span>
                                            }
                                        </b>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@if (selectedProductId != Guid.Empty)
{
    <GetItemByIdProductPage ProductId="selectedProductId"></GetItemByIdProductPage>
}


<style>
    .card_container {
    text-decoration: none;
    transition: all 0.3s ease-in-out;
}

.card_container:hover{
    cursor:pointer;
    box-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25);
    transform: translateY(-10px);
    
}

.card {
    height: 400px;
    overflow: hidden;
}


.card-body {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

.card-img-top {
  background-color: white;
}
img {
  
    height: auto;
    max-width: 100%;
    object-fit: contain;
    max-height: 270px;
    transition: 0.5s ease-in-out;
}
 
</style>

<Pagination>
    <PaginationItem Disabled="@(!hasPreviousPage)" @onclick="Previous">
        <PaginationLink>
            <span aria-hidden="true">«</span>
        </PaginationLink>
    </PaginationItem>
    @for (int i = 1; i <= totalPages; i++)
    {
        var pageNumberAsString = i.ToString();
        <PaginationItem Active="@(currentPage == i)">
            <PaginationLink Page="@pageNumberAsString" @onclick="() => SetActive(i)">
                @pageNumberAsString
            </PaginationLink>
        </PaginationItem>
    }
    <PaginationItem Disabled="@(!hasNextPage)" @onclick="Next">
        <PaginationLink>
            <span aria-hidden="true">»</span>
        </PaginationLink>
    </PaginationItem>
</Pagination>


<h3>Список продуктов</h3>

@code {

    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages;
    private bool hasNextPage;
    private bool hasPreviousPage;
    private List<Product> products;
    private Guid selectedProductId = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        string token = await localStorage.GetItemAsStringAsync("auth");
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var response = await Http.GetFromJsonAsync<PagedList<Product>>($"https://localhost:7228/api/Product/Paginate?PageNumber={currentPage}&PageSize={pageSize}");
        
        if (response != null)
        {
            products = response.Items;
            currentPage = response.PageNumber;
            pageSize = response.PageSize;
            totalPages = (int)Math.Ceiling((double)response.TotalCount / pageSize);
            hasPreviousPage = response.HasPreviousPage;
            hasNextPage = response.HasNextPage;
        }
    }
    private async Task Previous()
    {
        currentPage--;
        await LoadProducts();
        if (hasPreviousPage)
        {

        }
    }

    private async Task Next()
    {
        currentPage++;
        await LoadProducts();
        if (hasNextPage)
        {

        }
    }

    private async Task SetActive(int page)
    {
        currentPage = page;
        await LoadProducts();
        StateHasChanged();
    }


    private void NavigateToProduct(Guid productId)
    {
       if (productId == Guid.Empty)
    {
        Console.WriteLine("ProductId is empty");
        return;
    }
        Console.WriteLine($"Navigating to product with ID: {productId}");
        NavManager.NavigateTo($"/product/{productId}");
    }

    public class Product
    {
        public Guid Id { get; set; }
        /// <summary>
    /// Наименование товара
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// Стоимость товара
    /// </summary>
    public decimal Price { get; set; }

    /// <summary>
    /// Фото товара
    /// </summary>
    public string ImageURL { get; set; }

    /// <summary>
    /// Список продаж товара
    /// </summary>
    public IList<Sale> Sales { get; set; }

    public string CategoryName { get; set; }

    public string CategoryId { get; set; }

    }

    public class PagedList<T>
    {
        public List<T> Items { get; set; }
        public int TotalCount { get; set; }
        public int PageNumber { get; set; }
        public int PageSize { get; set; }
        public bool HasNextPage { get; set; }
        /// <summary>
        /// Есть предыдущая страница
        /// </summary>
        public bool HasPreviousPage { get; set; }


        public PagedList(List<T> items, int pageNumber, int pageSize, int totalCount)
        {
            Items = items;
            PageNumber = pageNumber;
            PageSize = pageSize;
            TotalCount = totalCount;
        }
    }

 
   

}
