@page "/shopingcart"

@using FoodShop.Client.States
@using NetcodeHub.Packages.Components.Validations.OnInput
@using Microsoft.AspNetCore.Components.Forms
@using FoodShop.Application.Interfaces.Identity
@using FoodShop.Application.DTO
@using Blazored.LocalStorage
@using FoodShop.Application.Services.BonusCardService
@using Syncfusion.Blazor.Core
@using Syncfusion.Blazor.Internal
@using FoodShop.Domain.Domain.Entities
@using System.Text.Json

@inject ILocalStorageService localStorage
@inject HttpClient Http

<h1>Shopping Cart</h1>

@if (sales == null)
{
    <p>Loading...</p>
}
else if (!sales.Any())
{
    <p>Your cart is empty.</p>
}

else if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-danger">
        @Message
    </div>
}

else
{
    <div class="cart-container">
        <h3> </h3>
            <h3 class="product-title">Product</h3>
            <h3>Quantity</h3>
            <h3>Price</h3>
            <h3 class="total">Total</h3>

      @foreach (var sale in sales)
    {
        <div>
            <button class="clear-btn" @onclick="() => RemoveItemFromCart(sale)" >Удалить из корзины</button>
        </div>
        <div class="cart-product">
               <input class="checkbox_input" type="checkbox" @onchange ="( (ChangeEventArgs e) => UpdateSelectedState(sale.Id,e) ) "></input>
              <div>
                  <img width="75"  src="@sale.Product.ImageURL" alt="@sale.Product.Name" />
                  <h3>@sale.Product.Name</h3>
              </div>
        </div>
           <h3 class="count">@sale.Qantity</h3>
           <h3>@sale.Product.Price.ToString("C")</h3>
           <h3 class="cart-product-total-price">@((sale.Product.Price * sale.Qantity).ToString("C"))</h3>
    }
    </div>

    <button class="clear-all-btn" @onclick="() => ClearStorage()" >Очистить корзину</button>
 
    <div class="cart-checkout">
        <div class="subtotal">
            <h3>Сумма к оплате</h3>
            <h3 >@((sales.Sum(sale => sale.TotalPrice)).ToString("C"))</h3>
        </div>
        <Label For="paymentAmount"> Введите сумму для оплаты:</Label>
        <input class="payment_input" type="text" id="paymentAmount" @bind="paymentAmount"></input>
        <div class="checkout_container">

        <h3>Выберите способ оплаты</h3>
        <div class="payment-buttons">
            
            <button class="checkout_btn" @onclick='() => ProcessPayment("BonusCard")'>Оплатить бонусной картой</button>
            <button class="checkout_btn"@onclick='() => ProcessPayment("Cash")'>Оплатить наличными</button>
            <button class="checkout_btn"@onclick='() => ProcessPayment("Wallet")'>Оплатить дебетовой картой</button>
        </div>
     </div>
</div>
 
}


<style>
    
    .cart-container {
        margin: auto;
        display: grid;
        grid-template-columns: repeat(5, minmax(0, 1fr));
        align-items: center;
        gap: 1rem;
    }

    .clear-btn {
        background-color: #8b5cf6;
        padding: 16px 20px;
        border: none;
        border-radius: 0.5rem;
    }

    .clear-btn:hover {
        cursor: pointer;
        background-color: #a78bfa;
    }

    .clear-all-btn{
        background-color: #e11d48;
        padding: 16px 20px;
        border: none;
        border-radius: 0.5rem;
        margin-top:2rem;
        margin-bottom: 3rem;
    }

        .clear-all-btn:hover {
        cursor: pointer;
        background-color: #f43f5e;
    }

    .checkbox_input{
        width: 20px;
        height: 20px;
    }

    .cart-product {
     display: flex;
    align-items: center;
    gap: 1rem;
    }

    .cart_checkout {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 2rem;
    }

    .checkout_container{
        display: flex;
        flex-direction:column;
        align-items: center;
    }

    .payment-buttons {
        margin-top: 1.5rem;
        margin-bottom: 4rem;
        display: flex;
        gap: 3rem;
    }

    .checkout_btn {
        background-color: #6366f1;
        padding: 16px 20px;
        border: none;
        border-radius: 0.5rem;

    }

        .checkout_btn:hover {
        background-color: #818cf8;
    }


    .subtotal {
        display: flex;
        gap: 1rem;
    }

.payment_input {
    padding: 4px;
    border-radius: 0.25rem;
}

.cart-item-titles{
    display:flex;
    border-top: 1px solid rgb(187, 187, 187);
    padding: 1rem 0;
}


    .cart-container h2 {
        font-weight: 400;
        font-size: 30px;
        text-align: center;
    }
    .cart-container .titles {
        margin: 2rem 0 1rem 0;
    }
    .cart-container .titles h3 {
        font-size: 14px;
        font-weight: 400;
        text-transform: uppercase;
    }

    .cart-item {
        border-top: 1px solid rgb(187, 187, 187);
        padding: 1rem 0;
    }
    .cart-container .titles .product-title {
        padding-left: 0.5rem;
    }
    .cart-container .titles .total {
        padding-right: 0.5rem;
        justify-self: right;
    }
    .cart-item .cart-product {
        display: flex;
    }
    .cart-item .cart-product img {
        width: 100px;
        max-width: 100%;
        margin-right: 1rem;
    }
    .cart-item .cart-product h3 {
        font-weight: 400;
    }
    .cart-item .cart-product button {
        border: none;
        outline: none;
        margin-top: 0.7rem;
        cursor: pointer;
        background: none;
        color: gray;
    }
    .cart-item .cart-product button:hover {
        color: black;
    }
 
    .cart-item .cart-product-quantity {
        display: flex;
        align-items: flex-start;
        justify-content: center;
        width: 130px;
        max-width: 100%;
        border: 0.5px solid rgb(177, 177, 177);
        border-radius: 5px;
    }
    .cart-item .cart-product-quantity button {
        border: none;
        outline: none;
        background: none;
        padding: 0.7rem 1.5rem;
        cursor: pointer;
    }
    .cart-item .cart-product-quantity .count {
        padding: 0.7rem 0;
    }
    .cart-item .cart-product-total-price {
        padding-right: 0.5rem;
        justify-self: right;
        font-weight: 700;
    }
 
    .cart-summary {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        padding-top: 2rem;
    }

    .continue-shopping,
    .start-shopping {
        margin-top: 1rem;
    }
    .continue-shopping a,
    .start-shopping a {
        color: gray;
        text-decoration: none;
        display: flex;
        align-items: center;
    }
    .continue-shopping a span,
    .start-shopping a span {
        margin-left: 0.5rem;
    }
    .cart-empty {
        font-size: 20px;
        margin-top: 2rem;
        color: rgb(84, 84, 84);
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    
    {
        .cart-container {
            padding: 2rem;
        }
        .cart-container .titles {
            display: none;
        }
        .cart-item,
        .cart-container .titles {
            grid-template-columns: 1fr;
            row-gap: 1rem;
        }
        .cart-item .cart-product-total-price {
            justify-self: left;
        }
        .cart-summary {
            flex-direction: column;
        }
        .cart-summary .clear-btn {
            margin-bottom: 2rem;
        }
    }
</style>


@code {
    public List<SaleDTO> sales;
    private string paymentAmount;
    [Parameter] public Guid ProductId { get; set; }
    public int amountToBPaid = 0;
    public bool checkboxClick = false;
    string? Message = string.Empty;

    private Dictionary<Guid, bool> selectedStates = new Dictionary<Guid, bool>();

    //Метод получения типа оплаты
    public async Task<WayOfPayment> PaymentSelection(string wayOfPayment)
    {
        WayOfPayment type;

        switch (wayOfPayment)
        {
            case "Cash": 
                type = WayOfPayment.CashPayment;
                break;
            case "BonusCard":
                type = WayOfPayment.BonusCard;
                break;
            case "Wallet":
                type = WayOfPayment.Wallet;
                break;
            default:
                throw new ArgumentException("Invalid payment method", nameof(wayOfPayment));
        }

        return type;
    }

    // Метод для обновления состояния чекбокса и сохранения его в localStorage
    private async Task UpdateSelectedState(Guid saleId, ChangeEventArgs e)
    {
        selectedStates = await localStorage.GetItemAsync<Dictionary<Guid, bool>>("selectedStates");
        Console.WriteLine(saleId);
        bool isChecked = (bool)e.Value;

        selectedStates[saleId] = isChecked;

        await localStorage.SetItemAsync("selectedStates", selectedStates);
    }
    
    //Метод для очистки корзины
    public async Task ClearStorage()
    {
        foreach(var sale in sales.ToList())
        {
             sales.Remove(sale);
             await localStorage.SetItemAsync("sale", sales);
        }
    }

    //Метод оплаты товаров 
    private async Task ProcessPayment(string payment)
    {
        decimal sumSalesTotalPrice = 0;
        Message = null;
        var selectedSales = sales.Where(sale => selectedStates.ContainsKey(sale.Id)&& selectedStates[sale.Id]).ToList();
        amountToBPaid += int.Parse(paymentAmount);

        var order = new CreateOrderDTO
        {
              Payment = await PaymentSelection(payment),

              Sales = selectedSales.Select(x => new CreateOrderSaleDTO()
              {
                  Id = x.Id,
                  ProductId = x.ProductId,
                  Qantity = x.Qantity,
                  TotalPrice = x.TotalPrice,
              }).ToList()
        };

        
        await Cancellation(order.Payment, amountToBPaid);
        if (string.IsNullOrEmpty(Message))
        {
              foreach(var sale in selectedSales)
            {
                sumSalesTotalPrice +=  sale.TotalPrice;
            }

            var response = await Http.PostAsJsonAsync<CreateOrderDTO>("https://localhost:7228/api/Order/Create", order);
            response.EnsureSuccessStatusCode();
      
            foreach(var sale in selectedSales.ToList())
            {
                await RemoveItemFromCart(sale);
            }
        }

      
    }

    //Метод отправки запросов на сервер для списания денег за оплату
    public async Task HttpRequest(string url, int amount, bool executeElse)

    {
        try
        {
            var response = await Http.PutAsJsonAsync(url, amount);
            if (!response.IsSuccessStatusCode)
            {
                Message = await response.Content.ReadAsStringAsync();
            }
            else if (executeElse)
            {
                await Http.PostAsJsonAsync($"https://localhost:7228/api/BonusCard/amount?amount={amount}", amount);
            }
        }
        catch (Exception ex)
        {
            Message = ex.Message; // Устанавливаем сообщение об ошибке
        }
    }

    //Метод выбора оплаты для списания денег
    public async Task Cancellation(WayOfPayment typePayment, int amount)
    {

       
            switch (typePayment)
            {
                case WayOfPayment.CashPayment:
                    await HttpRequest($"https://localhost:7228/api/CashPayment/amount?amount={amount}", amount, true);
                    break;
                case WayOfPayment.Wallet:
                    await HttpRequest($"https://localhost:7228/api/Wallet/amount?amount={amount}", amount, false);
                    break;
                case WayOfPayment.BonusCard:
                    await HttpRequest($"https://localhost:7228/api/BonusCard/cancellation?amount={amount}", amount, false);
                    break;
            }
        return;
    }   

    //Метод удаления товара в корзине
    private async Task RemoveItemFromCart(SaleDTO sale)
    {
        sales.Remove(sale);
        await localStorage.SetItemAsync("sale", sales);
    }

    //Метод обновления состояния chekbox для выбраного товара
    protected override async Task OnInitializedAsync()
    {
        string token = await localStorage.GetItemAsStringAsync("auth");
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        selectedStates = await localStorage.GetItemAsync<Dictionary<Guid, bool>>("selectedStates") ?? new Dictionary<Guid, bool>();

        sales = await localStorage.GetItemAsync<List<SaleDTO>>("sale") ?? new List<SaleDTO>();
      
        foreach (var sale in sales)
        {
            Console.WriteLine($"ProductId: {sale.ProductId}"); // Вывод для проверки
            if (sale.ProductId != null) 
            {
                sale.Product = await GetProductByIdAsync(sale.ProductId);
            }
        }
        await localStorage.SetItemAsync("sale", sales);
    }

    //Метод получения айди продукта
    private async Task<ProductDTO> GetProductByIdAsync(Guid productId)
    {
        ProductId = productId;
        return await Http.GetFromJsonAsync<ProductDTO>($"https://localhost:7228/api/Product/GetItem?productId={ProductId}");
    }
    
}